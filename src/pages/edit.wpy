<style lang="less">
.cancelBtn {
  background-color: #fff;
  color: #000;
  border-color: #fff;
}
.btnCon {
  display: flex;
  justify-content: center;
}
.editBtn {
  flex-basis: 45%;
}
</style>
<template>
  <view class="container">
    <form bindsubmit="submit">
        <van-cell-group>
            <van-field
            wx:if="{{_pageMode===page_mode.group}}"
            value="{{language}}"
            name="language"
            label="语言"
            placeholder="请输入语言"
            clearable="{{true}}"
            />
            <van-field
            wx:if="{{_pageMode===page_mode.group}}"
            value="{{group}}"
            name="group"
            label="分组"
            placeholder="请输入分组"
            clearable="{{true}}"
            />
            <van-field
            wx:if="{{_pageMode===page_mode.word||_pageMode===page_mode.meaning}}"
            value="{{word}}"
            name="word"
            label="词句"
            placeholder="请输入词句"
            clearable="{{true}}"
            />
            <repeat wx:if="{{_pageMode===page_mode.word||_pageMode===page_mode.meaning}}" for="{{meanings}}" key="index" index="index" item="item">
                <van-field
                value="{{item}}"
                name="meaning{{index}}"
                label="释义{{index+1}}"
                placeholder="请输入释义"
                clearable="{{true}}"
                left-icon="{{index=='0'?'info-o':'delete'}}"
                icon="{{index+1===meanings.length?'add':null}}"
                bindclickicon="addMeaning"
                bindleftIconClicked="reduceMeaning"
                @input="meaningInputed"
                data-idx="{{index}}"
                />
            </repeat>
        </van-cell-group>
        <view wx:if="{{_pageMode!==page_mode.group}}" class="retract btnCon">
            <button type="primary" class="inline_btn_base editBtn " form-type="submit">添加</button>
            <button type='warn' class="inline_btn_base editBtn cancelBtn" @tap="deleteWord">删除</button>
        </view>
        <view  wx:else class="retract">
            <button type="primary" form-type="submit">添加</button>
        </view>
    </form>
  </view>
</template>

<script>
import wepy from 'wepy';
import dict from '../cloud/dictionary';
import Utils from '../utils/utils';
import flag from '../cloud/flag';
const { success, fail } = flag;
const modify_mode = {
  addGroup: 'add group',
  addWord: 'add word',
  update: 'update'
};
const page_mode = {
  group: '新增语言或分组',
  meaning: '新增释义',
  word: '新增词'
};
export default class Edit extends wepy.page {
  config = {
    navigationBarTitleText: '编辑',
    usingComponents: {
      'demo-block': '../components/vant/demo-block',
      'van-button': '../components/vant/button',
      'van-field': '../components/vant/field',
      'van-cell': '../components/vant/cell',
      'van-cell-group': '../components/vant/cell-group'
    }
  };
  components = {};
  data = {
    language: '',
    group: '',
    word: '',
    meanings: [''],
    _modifyMode: modify_mode.addGroup,
    _pageMode: page_mode.group
  };

  computed = {
    page_mode() {
      return page_mode;
    }
  };

  methods = {
    meaningInputed(d) {
      const value = d.detail;
      const idx = d.currentTarget.dataset.idx;
      this.meanings[idx] = value;
    },
    addMeaning() {
      this.meanings.push('');
    },
    reduceMeaning(e) {
      const idx = e.currentTarget.dataset.idx;
      Utils.arr_splice(this.meanings, idx);
    },
    submit(d) {
      const _modifyMode = this._modifyMode;
      const originData = d.detail.value;
      const meanings = [];
      for (let key in originData) {
        if (key.indexOf('meaning') > -1) {
          meanings.push(originData[key]);
        }
      }
      const { group, language, word } = originData;
      const data = {
        meanings,
        group,
        language,
        word
      };
      if (_modifyMode === modify_mode.addGroup) {
        this.addGroup(data);
      } else if (_modifyMode === modify_mode.addWord) {
        this.addWord(data);
      } else if (_modifyMode === modify_mode.update) {
        this.update(data);
      }
    },
    async deleteWord() {
      const res = await dict.deleteWord(this.rule._id);
      Utils.gobackWhenSuccess(res);
    }
  };

  async addGroup({ language, group, word, meanings }) {
    const res = await dict.save(language, group, word, meanings);
    Utils.gobackWhenSuccess(res);
  }
  async addWord({ word, meanings }) {
    const { language, group } = this.rule;
    const res = await dict.save(language, group, word, meanings);
    Utils.gobackWhenSuccess(res);
  }
  async update(d) {
    const res = await dict.update(this.id, d);
    Utils.gobackWhenSuccess(res);
  }
  onLoad({ rule, pageMode }) {
    this._pageMode = page_mode[pageMode];
    if (rule != null) this.rule = JSON.parse(rule);
    this.decidePageMode();
    this.queryDictOnUpdateMode();
  }
  decidePageMode() {
    switch (this._pageMode) {
      case page_mode.group:
        this._modifyMode = modify_mode.addGroup;
        break;
      case page_mode.meaning:
        this._modifyMode = modify_mode.update;
        break;
      case page_mode.word:
        this._modifyMode = modify_mode.addWord;
        break;
    }
  }
  queryDictOnUpdateMode() {
    if (this._modifyMode === modify_mode.update) {
      this.queryDict();
    }
  }
  async queryDict() {
    const data = await dict.where(this.rule);
    const { _id, group, language, word, meanings } = data[0];
    this.id = _id;
    this.language = language;
    this.group = group;
    this.word = word;
    this.meanings = meanings;
    this.$apply();
  }
}
</script>
